#! /bin/bash
# testing branch 1

echo "ready to start? [Y,n]"
read -p ">>" ready
if [[ $ready = y ]] || [[ $ready = Y ]]
then
  echo "what is your project's name?"
  read -p ">> " projectname
  echo "what type of configuration would you like? [react, threejs, php]"
  read -p ">> " projconf
  echo "Your project will be named $projectname, configuration will be $projconf, continue? [Y,n]"
  read -p ">>" ready
    if [[ $ready = y ]] || [[ $ready = Y ]]
    then
    if [[ $projconf = react ]]
    then
      echo "building project..."
      mkdir $projectname
      cd $projectname
        echo "npm initializing, please complete:"
        npm init
        # node module installs start
        echo "installing node modules..."
        npm install react
        npm install react-dom
        npm install express
        npm install body-parser
        npm install --save-dev nodemon
        npm install --save-dev webpack
        npm install --save-dev webpack-cli
        npm install --save-dev babel-loader
        npm install --save-dev @babel/core
        npm install --save-dev @babel/preset-env
        npm install --save-dev @babel/preset-react
        # node module installs end
        # client directory start
        mkdir client
        cd client
          mkdir public
          cd public
            touch index.html
            cd ..
        # client directory end
        # src directory start
          mkdir src
          cd src
            touch index.js
            mkdir components
            cd components
              touch App.js
              cd ..
            cd ..
          cd ..
        # src directory end
        # server directory start
        mkdir server
        cd server
          touch index.js
          cd ..
        # server directory end
        # root files start
        touch .gitignore
          echo "## MAC files ##" >> .gitignore
          echo ".DS_Store" >> .gitignore
          echo "" >> .gitignore
          echo "## NPM ##" >> .gitignore
          echo "npm" >> .gitignore
          echo "npm-debug.log" >> .gitignore
          echo "node_modules/" >> .gitignore
          echo "" >> .gitignore
          echo "pids" >> .gitignore
          echo "*.pid" >> .gitignore
          echo "logs" >> .gitignore
          echo "*.log" >> .gitignore
          echo "" >> .gitignore
          echo "# Directory for instrumented libs generated by jscoverage/JSCover" >> .gitignore
          echo "lib-cov" >> .gitignore
          echo "" >> .gitignore
          echo "# Coverage directory used by tools like istanbul" >> .gitignore
          echo "coverage" >> .gitignore
          echo "" >> .gitignore
          echo "# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)" >> .gitignore
          echo ".grunt" >> .gitignore
          echo "" >> .gitignore
          echo "# Compiled Dirs (http://nodejs.org/api/addons.html)" >> .gitignore
          echo "build/" >> .gitignore
          echo "dist/" >> .gitignore
        touch webpack.config.js
          echo "var path = require('path');" >> ./webpack.config.js
          echo "var src_dir = path.join(__dirname, './client/src');" >> ./webpack.config.js
          echo "var public_dir = path.join(__dirname, './client/public');" >> ./webpack.config.js
          echo "" >> ./webpack.config.js
          echo "module.exports = {" >> ./webpack.config.js
          echo "  entry: `\$\{src_dir\}/index.js`," >> ./webpack.config.js #need to sort out the escape chars here
          echo "  output: {" >> ./webpack.config.js
          echo "    filename: 'bundle.js'," >> ./webpack.config.js
          echo "    path: public_dir" >> ./webpack.config.js
          echo "  }," >> ./webpack.config.js
          echo "  module: {" >> ./webpack.config.js
          echo "    rules: [" >> ./webpack.config.js
          echo "      {" >> ./webpack.config.js
          echo "        test: /\.jsx?/," >> ./webpack.config.js
          echo "        include: src_dir," >> ./webpack.config.js
          echo "        loader: 'babel-loader'," >> ./webpack.config.js
          echo "        options: {" >> ./webpack.config.js
          echo "          'presets': ['@babel/preset-env', '@babel/preset-react']" >> ./webpack.config.js
          echo "        }" >> ./webpack.config.js
          echo "      }," >> ./webpack.config.js
          echo "      {" >> ./webpack.config.js
          echo "        test: /\.(png|jpe?g|gif)$/i," >> ./webpack.config.js
          echo "        use: [" >> ./webpack.config.js
          echo "          {" >> ./webpack.config.js
          echo "            loader: 'file-loader'," >> ./webpack.config.js
          echo "          }," >> ./webpack.config.js
          echo "        ]," >> ./webpack.config.js
          echo "      }" >> ./webpack.config.js
          echo "    ]" >> ./webpack.config.js
          echo "  }" >> ./webpack.config.js
          echo "};" >> ./webpack.config.js
        echo "finished!"
        # root files end
        elif [[ $projconf = threejs ]]
        then
          echo "three config"
        elif [[ $projconf = php ]]
        then
          echo "php config"
        else
          echo "unsupported configuration, exiting script"
        fi
    else
      echo "please come back when you are ready"
    fi
else
  echo "please come back when you are ready"
fi
